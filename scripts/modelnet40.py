# -*- coding: utf-8 -*-
"""ModelNet40.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJwrNLiybm2byHhxjcv92rZ6uBzA0Sd9
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
df1 = pd.read_csv('data.csv')

density = ['occlusion', 'lidar', 'density_inc', 'density', 'cutout']
noise = ['uniform', 'gaussian', 'impulse', 'upsampling', 'background']
transform = ['distortion', 'distortion_rbf', 'distortion_rbf_inv', 'rotation', 'shear']
df1 = df1.drop(columns="Severity")
df1 = df1.drop(columns="Model")

df1['Augmentation'] = df1['Augmentation'].str.replace('cutmix_k_test','cutmix_k')
df1['Augmentation'] = df1['Augmentation'].str.replace('cutmix_r_test','cutmix_r')
df1['Augmentation'] = df1['Augmentation'].str.replace('mixup_test','mixup')
df1['Augmentation'] = df1['Augmentation'].str.replace('rsmix_test','rsmix')
df1['Augmentation'] = df1['Augmentation'].str.replace('test','original')
display(df1)

grouped_df = df1.groupby(['Augmentation Type', 'Augmentation'], group_keys=False).mean()
display(grouped_df)

grouped_df1 = df1.groupby(['Augmentation Type', 'Augmentation', 'Corruption'], group_keys=False).mean()
grouped_df1 = grouped_df1.drop(columns="Class Accuracy")
grouped_df1 = grouped_df1.reset_index()
custom_sort_order = ['occlusion','lidar','density_inc','density','cutout','uniform' ,'gaussian','impulse', 'upsampling', 'background', 'rotation', 'shear','distortion','distortion_rbf','distortion_rbf_inv']# Sort the DataFrame by "Corruption" and "Attention" with custom sort order for "Attention"

#df_sorted = grouped_df.sort_values(by=['Augmentation', 'Corruption'], ascending=[True, True])
df_sorted = grouped_df1
#df_sorted = grouped_df.sort_values(by=['Augmentation', 'Corruption'], ascending=[True, True])
#df_sorted['Corruption'] = pd.Categorical(df_sorted['Corruption'], categories=custom_sort_order['Corruption'], ordered=True)
df_sorted["Corruption"] = pd.Categorical(df_sorted["Corruption"], custom_sort_order)
df_sorted = df_sorted.sort_values(by=[ 'Augmentation','Corruption']).reset_index()
#df_sorted = df_sorted.sort_values(by='Corruption')
df_sorted['Model Accuracy'] = df_sorted['Model Accuracy'].apply(lambda x: '{:.4f}'.format(x))
#df_sorted = df_sorted.transpose()
display(df_sorted)

file_path = '/content/Table.csv'  # Modify the file path as needed
df_sorted.to_csv(file_path, index=False)
d1 = df_sorted.groupby(['Augmentation Type', 'Augmentation'])

grouped_df = grouped_df.reset_index()
file_path = '/content/Mean_Augmentation_Type.csv'  # Modify the file path as needed
grouped_df.to_csv(file_path, index=False)
print("HI")

new_data = grouped_df
print(new_data)
new_data
augmentation_types = new_data["Augmentation Type"].unique()
print(new_data["Augmentation Type"])
print(augmentation_types)

df = grouped_df

# Grouped bar graph
plt.figure(figsize=(10, 6))  # Optional: Set the size of the figure
colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
# Grouped data for each augmentation type

augmentation_order = ["original"] + df.loc[df["Augmentation"] != "original", "Augmentation"].unique().tolist()
df["Augmentation"] = pd.Categorical(df["Augmentation"], augmentation_order)
df = df.sort_values(by=["Augmentation Type", "Augmentation"])

grouped_data = df.groupby(["Augmentation Type", "Augmentation"])["Model Accuracy"].mean().unstack()

print(grouped_data)

# Plotting the grouped bar graph
ax = grouped_data.plot(kind="bar", stacked=False, color = colors)
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2)
# Optional: Add labels and title
plt.xlabel("Augmentation Type")
plt.ylabel("Model Accuracy")
plt.title("Model Accuracy by Augmentation Type")
plt.ylim(0,1)



# Display the graph
plt.show()

df = grouped_df

# Grouped bar graph
plt.figure(figsize=(10, 6))  # Optional: Set the size of the figure
colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
# Grouped data for each augmentation type
augmentation_order = ["original"] + df.loc[df["Augmentation"] != "original", "Augmentation"].unique().tolist()
df["Augmentation"] = pd.Categorical(df["Augmentation"], augmentation_order)
df = df.sort_values(by=["Augmentation Type", "Augmentation"])

grouped_data = df.groupby(["Augmentation Type", "Augmentation"])["Class Accuracy"].mean().unstack()
print(grouped_data)


# Plotting the grouped bar graph
ax = grouped_data.plot(kind="bar", stacked=False, color = colors)
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2)
# Optional: Add labels and title
plt.xlabel("Augmentation Type")
plt.ylabel("Mean Class Accuracy")
plt.title("Mean Class Accuracy by Augmentation Type")
plt.ylim(0,1)



# Display the graph
plt.show()
#Model:

# Augmentation       original  cutmix_k  cutmix_r     mixup     rsmix
# Augmentation Type                                                  
# density            0.542496  0.655008  0.635883  0.645413  0.685689
# noise              0.535397  0.731896  0.762156  0.636110  0.791216
# transform          0.677536  0.765462  0.737731  0.726451  0.850600

data = {
   
    "Augmentation": ["original", "rsmix", "mixup", "cutmix_r", "cutmix_k"],
    "Accuracy": [0.8889789303079416, 0.9039708265802269, 0.899513776337115, 0.8954619124797407, 0.8962722852512156],
    "Mean Class Accuracy": [0.8524709302325582, 0.8621279069767442, 0.8622499999999998, 0.8598372093023254, 0.8634186046511628]
}

df = pd.DataFrame(data)

file_path = '/content/ModelNet40.csv'  # Modify the file path as needed
df.to_csv(file_path, index=False)
df["Augmentation"] = pd.Categorical(df["Augmentation"], augmentation_order)
df = df.sort_values(by=["Augmentation"])

# Pivot the DataFrame
df_pivoted = df.melt(id_vars='Augmentation', value_vars=['Accuracy', 'Mean Class Accuracy'], var_name='Accuracy Type', value_name='Accuracy Value')
grouped_data = df_pivoted.groupby(["Accuracy Type", "Augmentation"])["Accuracy Value"].mean().unstack()
print(grouped_data)
# Plotting the grouped bar graph
ax = grouped_data.plot(kind="bar", stacked=False, color = colors)
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2)
# Optional: Add labels and title
plt.xlabel("Augmentation Type")
plt.ylabel("Accuracy")
plt.title("Accuracy on ModelNet40")
plt.ylim(0.8,.95)



# Display the graph
plt.show()

data = {
    "Augmentation Type": ["Type A"] * 5 + ["Type B"] * 5,
    "Augmentation": ["Aug A1", "Aug A2", "Aug A3", "Aug A4", "Aug A5", "Aug B1", "Aug B2", "Aug B3", "Aug B4", "Aug B5"],
    "Model Accuracy": [0.8, 0.9, 0.7, 0.85, 0.75, 0.65, 0.75, 0.6, 0.8, 0.7]
}

df = pd.DataFrame(data)

# Grouped bar graph
plt.figure(figsize=(10, 6))  # Optional: Set the size of the figure

# Grouped data for each augmentation type
grouped_data = grouped_df.groupby(["Augmentation Type", "Augmentation"])["Model Accuracy"].mean().unstack()

# Plotting the grouped bar graph
ax = grouped_data.plot(kind="bar", stacked=False, width=0.8)  # Increase bar width

# Customizing the appearance of the bars
for container in ax.containers:
    plt.setp(container, edgecolor='black')  # Add black edge color to bars

# Optional: Add labels and title
plt.xlabel("Augmentation Type")
plt.ylabel("Model Accuracy")
plt.title("Model Accuracy by Augmentation Type")

plt.legend(title="Augmentation")

# Increase y-axis width
plt.gca().spines['left'].set_linewidth(2.5)

# Display the graph
plt.show()